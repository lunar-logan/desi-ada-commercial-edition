def p_number_decl(p):
    '''number_decl : def_id_s COLON CONSTANT IS_ASSIGNED expression SEMICOLON'''
    p[0]=Number_decl(p[1],p[3],p[5],lineno=p.lineno(2))
    
def p_type_decl(p):
    '''type_decl : TYPE IDENTIFIER discrim_part_opt type_completion SEMICOLON'''
    p[0]=Type_decl(p[2],p[3],p[4],lineno=p.lineno(1))
    
#discrim_part_opt not handled as of now
def p_discrim_part_opt(p):
    '''discrim_part_opt :
    | discrim_part
    | LPAREN BOX RPAREN'''
    pass

def p_type_completion(p):
    '''type_completion :
    | IS type_def'''
    if len(p)==3:
        p[0]=p[2]
    else:
        p[0]=None
def p_subtype_decl(p):
    '''subtype_decl : SUBTYPE IDENTIFIER IS subtype_ind SEMICOLON'''
    p[0]=Subtype_decl(p[2],p[4])
    
def p_subtype_ind(p):
    '''subtype_ind : name constraint
    | name'''
    if len(p)==3:
        p[0]=Subtype_ind(p[1],p[2])
    else:
        p[0]=Subtype_ind(p[1],None)
    
def p_constraint(p):
    '''constraint : range_constraint
    | decimal_digits_constraint'''
    p[0]=p[1]
def p_decimal_digits_constraint(p):
    '''decimal_digits_constraint : DIGITS expression range_constr_opt'''
def p_integer_type(p):
    '''integer_type : range_spec
    | MOD expression'''
    if len(p)==2:
        p[0]=p[1]
    else:
        p[0]=Doubledot_range(0,p[2],1)
        
def p_range_spec(p):
    '''range_spec : range_constraint'''
    p[0]=p[1]
    
def p_range_spec_opt(p):
    '''range_spec_opt :
    | range_spec'''
    if len(p)==2:
        p[0]=p[1]
    else:
        return
    
def p_iter_discrete_range_s(p):
    '''iter_discrete_range_s : discrete_range
    | iter_discrete_range_s COMMA discrete_range'''
    if len(p)==2:
        p[0]=Iter_discrete_range_s([p[1]])
    else:
        p[0]=p[1]
        p[0].append(p[3])
        
def p_discrete_range(p):
    '''discrete_range : name range_constr_opt
    | range'''
    if len(p)==3:
        p[0]=Range_constr(p[1],p[2],lineno=p.lineno(1))
    else:
        p[0]=p[1]
        
def p_discrim_part(p):
    '''discrim_part : LPAREN discrim_spec_s RPAREN'''
    p[0]=p[1]
    
def p_discrim_spec_s(p):
    '''discrim_spec_s : discrim_spec
    | discrim_spec_s SEMICOLON discrim_spec'''
    if len(p)==2:
        p[0]=Disrim_spec_s([p[1]])
    else:
        p[0]=p[1]
        p[0].append(p[3])
        
def p_discrim_spec(p):
    '''discrim_spec : def_id_s COLON access_opt mark init_opt
    | error'''
    if len(p)==6:
        Discrim_spec(p[1],p[3],p[4],p[5],lineno=p.lineno(2))
    else:
        pass
    
def p_access_opt(p):
    '''access_opt :
    | ACCESS'''
    if len(p)==2:
        p[0]=p[1]
    else:
        p[0]=None
def p_discrete_with_range(p):
    '''discrete_with_range : name range_constraint
    | range'''
    if len(p)==3:
        p[0]=Range_constr(p[1],p[2],lineno=p.lineno(1))
    else:
        p[0]=p[1]
def p_c_name_list(p):
    '''c_name_list : compound_name
     | c_name_list COMMA compound_name'''
    if len(p)==2:
        p[0]=C_name_list([p[1]])
    else:
        p[0]=p[1]
        p[0].append(p[3])
        
def p_selected_comp(p):
    '''selected_comp : name DOT simple_name
    | name DOT used_char
    | name DOT operator_symbol
    | name DOT ALL'''
    p[0]=Selected_comp(p[1],p[3],lineno=p.lineno(2))
    
def p_attribute(p):
    '''attribute : name TICK attribute_id'''
    p[0]=Attribute(p[1],p[3],lineno=p.lineno(2))

def p_aggregate(p):
    '''aggregate : LPAREN comp_assoc RPAREN
    | LPAREN value_s_2 RPAREN
    | LPAREN expression WITH value_s RPAREN
    | LPAREN expression WITH NULL RECORD RPAREN
    | LPAREN NULL RECORD RPAREN'''
    if len(p)==4:
        p[0]=Aggregate_1(p[2],lineno=p.lineno(1))
    elif len(p)==6:
        p[0]=Aggregate_2(p[2],p[4],lineno=p.lineno(1))
    elif len(p)==7:
        p[0]=Aggregate_3(p[2],p.lineno(1))
    else:
        p[0]=Aggregate_3(None,lineno=p.lineno(1))
        
def p_value_s_2(p):
    '''value_s_2 : value COMMA value
    | value_s_2 COMMA value'''
    if len(p)==2:
        p[0]=Value_s_2([p[1]])
        p[0].append(p[3])
    else:
        p[0]=p[1]
        p[0].append(p[3])
        
def p_comp_assoc(p):
    '''comp_assoc : choice_s ARROW expression'''
    p[0]=Comp_assoc(p[1],p[3],lineno=p.lineno(2))

def p_qualified(p):
    '''qualified : name TICK parenthesized_primary'''
    p[0]=Qualified(p[1],p[3],lineno=p.lineno(2))
    
def p_allocator(p):
    '''allocator : NEW name
    | NEW qualified'''
    p[0]=New(p[2],lineno=p.lineno(1))
def p_statement(p):
    '''statement : unlabeled'''
    p[0]=p[1]
    
def p_unlabeled(p):
    '''unlabeled : simple_stmt
    | compound_stmt'''
    p[0]=p[1]
            
def p_subprog_decl(p):
    '''subprog_decl : subprog_spec SEMICOLON
    | generic_subp_inst SEMICOLON'''
    p[0]=p[1]

def p_limited_opt(p):
    '''limited_opt :
    | LIMITED'''
    if len(p)==2:
        p[0]=Limited(p[1])
    else:
        p[0]=Limited(None)
   
def p_name_s(p):
    '''name_s : name
    | name_s COMMA name'''
    if len(p)==2 :
        p[0] = Name_s([p[1]])
    else :
        p[0] = p[1]
        p[0].append(p[3]) 

def p_generic_subp_inst(p):
    '''generic_subp_inst : subprog_spec IS generic_inst'''
    p[0]=Gen_subp_inst(p[1],p[3])

def p_generic_inst(p):
    '''generic_inst : NEW name'''
    p[0]=New(p[2],lineno=p.lineno(1))
